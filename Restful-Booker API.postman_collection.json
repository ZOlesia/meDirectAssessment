{
	"info": {
		"_postman_id": "807a3d2b-46f7-4f1e-b341-21a693ede1e4",
		"name": "Restful-Booker API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2868984"
	},
	"item": [
		{
			"name": "Auth - CreateToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Should return a object\", () => {\r",
							"    pm.expect(response, 'The response is not an object').to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain the `token` property in the response\", () => {\r",
							"    pm.expect(response, 'The response does not contain the `token` property').to.haveOwnProperty('token');\r",
							"});\r",
							"\r",
							"pm.test(\"Should return a string for the `token` property\", () => {\r",
							"    pm.expect(response.token, 'The `token` property is not a string').to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", () => {\r",
							"    pm.expect(pm.response.code, 'Response code is not 200').to.equal(200);\r",
							"});\r",
							"\r",
							"// Only set the variable if the response is successful \r",
							"if (pm.response.code === 200) {\r",
							"    console.log('here');\r",
							"    pm.environment.set(\"authToken\", response.token);\r",
							"}\r",
							"\r",
							"\r",
							"// pm.test(\"Content-Type is application/json\", function () {\r",
							"//     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"Response time is less than 200ms\", function () {\r",
							"//   pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"// });\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth"
					]
				},
				"description": "# Authentication Endpoint\n\nThis endpoint is used to authenticate a user and obtain an access token.\n\n## Test Cases\n\n1. Verify successful authentication with valid username and password.\n    \n2. Verify unsuccessful authentication with invalid username or password.\n    \n\n## Test Steps\n\n1. Send a POST request to {{baseUrl}}/auth with the username and password in the request body.\n    \n2. Check the response status code and the presence of the access token.\n    \n\n## Request\n\n- Method: POST\n    \n- Endpoint: {{baseUrl}}/auth\n    \n- { \"username\": \"admin\", \"password\": \"password123\" }\n    \n\n## Response\n\nThe response is in JSON format and follows the schema below:\n\n``` json\n{\n    \"token\": \"string\"\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "CreateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const _ = require('lodash'); // Import Lodash \r",
							"const expectedData = JSON.parse(pm.variables.get(\"payload\"));\r",
							"\r",
							"pm.test(\"Should have a valid JSON format response body\", () => {\r",
							"    pm.expect(response).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"pm.test(\"Should have the `bookingid` property in the response object and is a non-negative integer\", () => {\r",
							"  pm.expect(response.bookingid).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Should have the required 'booking' object in the response\", () => {\r",
							"    pm.expect(response.booking).to.be.an('object');\r",
							"    pm.expect(response.booking).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Should have expected 'booking' data in the response\", () => {\r",
							"        pm.expect(_.isMatch(response.booking, expectedData)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", () => {\r",
							"    pm.expect(pm.response.code, 'Response code is not 200').to.equal(200);\r",
							"});\r",
							"\r",
							"// Only set the variable if the response is successful \r",
							"if (pm.response.code === 200) {\r",
							"    pm.environment.set(\"bookingId\", response.bookingid);\r",
							"    pm.environment.set(\"booking\", JSON.stringify(response.booking));\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let payload = {\r",
							"    \"firstname\" : pm.variables.replaceIn('{{$randomFirstName}}'),\r",
							"    \"lastname\" : pm.variables.replaceIn('{{$randomLastName}}'),\r",
							"    \"totalprice\" : parseInt(pm.variables.replaceIn('{{$randomInt}}')),\r",
							"    \"depositpaid\" : pm.variables.replaceIn('{{$randomBoolean}}') === \"true\",\r",
							"    \"bookingdates\" : {\r",
							"        \"checkin\" : \"2018-01-01\",\r",
							"        \"checkout\" : \"2019-01-01\"\r",
							"    },\r",
							"    \"additionalneeds\" : \"Breakfast\"\r",
							"}\r",
							"\r",
							"pm.variables.set('payload', JSON.stringify(payload));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "// {\r\n//     \"firstname\" : \"{{$randomFirstName}}\",\r\n//     \"lastname\" : \"{{$randomLastName}}\",\r\n//     \"totalprice\" : {{$randomInt}},\r\n//     \"depositpaid\" : {{$randomBoolean}},\r\n//     \"bookingdates\" : {\r\n//         \"checkin\" : \"2018-01-01\",\r\n//         \"checkout\" : \"2019-01-01\"\r\n//     },\r\n//     \"additionalneeds\" : \"Breakfast\"\r\n// }\r\n\r\n{{payload}}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingIds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const bookingId = parseInt(pm.environment.get(\"bookingId\"));\r",
							"// pm.test(\"Should contain an accounts 'array' in the response\", () => {\r",
							"//     pm.expect(response).to.be.an('array').that.is.not.empty;\r",
							"// });\r",
							"\r",
							"// pm.test(\"Should contain object in the response array\", () => {\r",
							"//     pm.expect(response[0]).to.be.an(\"object\");\r",
							"// });\r",
							"pm.test(\"Response should be an array of booking IDs\", () => {\r",
							"    pm.expect(response).to.be.an(\"array\").that.is.not.empty;\r",
							"    pm.expect(response[0]).to.have.property(\"bookingid\");\r",
							"    pm.expect(response[0]).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(`Should contain booking id ${bookingId} in the response array`, () => {\r",
							"    const booking = response.filter(function (item) {\r",
							"        return item.bookingid === bookingId;\r",
							"    });\r",
							"    pm.expect(booking[0].bookingid).to.equal(bookingId);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingIdsByName",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const booking = JSON.parse(pm.variables.get(\"booking\"));\r",
							"\r",
							"pm.variables.set('firstname', booking.firstname);\r",
							"pm.variables.set('lastname', booking.lastname);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const firstname = pm.variables.get(\"firstname\");\r",
							"const lastname = pm.variables.get(\"lastname\");\r",
							"const bookingId = parseInt(pm.environment.get(\"bookingId\"));\r",
							"console.log(response);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(`Response should be an array of booking IDs for firstname=${firstname} and lastname=${lastname}`, function () {\r",
							"    pm.expect(response).to.be.an(\"array\").that.is.not.empty;\r",
							"    pm.expect(response[0]).to.have.property(\"bookingid\");\r",
							"    pm.expect(response[0]).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(`Should contain booking id ${bookingId} in the response array`, () => {\r",
							"    const booking = response.filter(function (item) {\r",
							"        return item.bookingid === bookingId;\r",
							"    });\r",
							"    pm.expect(booking[0].bookingid).to.equal(bookingId);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking?firstname={{firstname}}&lastname={{lastname}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "firstname",
							"value": "{{firstname}}"
						},
						{
							"key": "lastname",
							"value": "{{lastname}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingIdsByDate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const booking = JSON.parse(pm.variables.get(\"booking\"));\r",
							"\r",
							"pm.variables.set('checkin', booking.bookingdates.checkin);\r",
							"pm.variables.set('checkout', booking.bookingdates.checkout);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const checkin = pm.variables.get('checkin');\r",
							"const checkout = pm.variables.get('checkout');\r",
							"const bookingId = parseInt(pm.environment.get(\"bookingId\"));\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(`Response should be an array of booking IDs for checkin=${checkin} and checkout=${checkout}`, () => {\r",
							"    pm.expect(response).to.be.an(\"array\").that.is.not.empty;\r",
							"    pm.expect(response[0]).to.have.property(\"bookingid\");\r",
							"    pm.expect(response[0]).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(`Should contain booking id ${bookingId} in the response array`, () => {\r",
							"    const booking = response.filter(function (item) {\r",
							"        return item.bookingid === bookingId;\r",
							"    });\r",
							"    pm.expect(booking[0].bookingid).to.equal(bookingId);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking?checkin={{checkin}}&checkout={{checkout}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "checkin",
							"value": "{{checkin}}"
						},
						{
							"key": "checkout",
							"value": "{{checkout}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const _ = require('lodash'); // Import Lodash \r",
							"const expectedData = JSON.parse(pm.environment.get(\"booking\"));\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain 'object' in the response\", function () {\r",
							"    pm.expect(response).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Should return the correct booking data\", function () {\r",
							"    pm.expect(_.isMatch(response, expectedData)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const _ = require('lodash'); \r",
							"const expectedData = JSON.parse(pm.variables.get(\"payload\"));\r",
							"\r",
							"pm.test(\"Status code is 200 (OK)\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should have a valid JSON format response body\", () => {\r",
							"    pm.expect(response).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"pm.test(\"Should have the required 'booking' object in the response\", () => {\r",
							"    pm.expect(response).to.be.an('object');\r",
							"    pm.expect(response).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Should have expected 'booking' data in the response\", () => {\r",
							"        pm.expect(_.isMatch(response, expectedData)).to.be.true;\r",
							"});\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    pm.environment.set(\"booking\", JSON.stringify(response));\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let payload = {\r",
							"    \"firstname\" : pm.variables.replaceIn('{{$randomFirstName}}'),\r",
							"    \"lastname\" : pm.variables.replaceIn('{{$randomLastName}}'),\r",
							"    \"totalprice\" : parseInt(pm.variables.replaceIn('{{$randomInt}}')),\r",
							"    \"depositpaid\" : pm.variables.replaceIn('{{$randomBoolean}}') === \"true\",\r",
							"    \"bookingdates\" : {\r",
							"        \"checkin\" : \"2018-01-01\",\r",
							"        \"checkout\" : \"2019-01-01\"\r",
							"    },\r",
							"    \"additionalneeds\" : \"Dinner\"\r",
							"}\r",
							"\r",
							"pm.variables.set('payload', JSON.stringify(payload));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "// {\r\n//     \"firstname\" : \"Jim\",\r\n//     \"lastname\" : \"Brown\",\r\n//     \"totalprice\" : 1111,\r\n//     \"depositpaid\" : false,\r\n//     \"bookingdates\" : {\r\n//         \"checkin\" : \"2018-01-01\",\r\n//         \"checkout\" : \"2019-01-01\"\r\n//     },\r\n//     \"additionalneeds\" : \"Dinner\"\r\n// }\r\n\r\n{{payload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PartialUpdateBooking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let payload = {\r",
							"    \"firstname\" : pm.variables.replaceIn('{{$randomFirstName}}'),\r",
							"    \"lastname\" : pm.variables.replaceIn('{{$randomLastName}}')\r",
							"}\r",
							"\r",
							"pm.variables.set('payload', JSON.stringify(payload));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const expectedData = JSON.parse(pm.variables.get(\"payload\"));\r",
							"\r",
							"pm.test(\"Status code is 200 (OK)\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should have a valid JSON format response body\", () => {\r",
							"    pm.expect(response).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"pm.test(\"Should have the required 'booking' object in the response\", () => {\r",
							"    pm.expect(response).to.be.an('object');\r",
							"    pm.expect(response).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Should have expected 'booking' data in the response\", () => {\r",
							"    pm.expect(response.firstname).to.eql(expectedData.firstname);\r",
							"    pm.expect(response.lastname).to.eql(expectedData.lastname);\r",
							"});\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    pm.environment.set(\"booking\", JSON.stringify(response));\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{payload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"// pm.sendRequest({\r",
							"//     url: `${pm.environment.get('baseUrl')}/${pm.environment.get('bookingId')}`,\r",
							"//     method: \"GET\",\r",
							"// }, function (err, response) {\r",
							"//     pm.test(\"Resource should no longer exist\", function () {\r",
							"//         pm.expect(response.code).to.equal(404);\r",
							"//     });\r",
							"// });\r",
							"\r",
							"//clean up all variables now that the folder's run is over\r",
							"pm.environment.unset(\"booking\")\r",
							"pm.environment.unset(\"bookingId\")\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{authToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ping - HealthCheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/ping",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	]
}